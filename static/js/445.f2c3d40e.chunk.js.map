{"version":3,"file":"static/js/445.f2c3d40e.chunk.js","mappings":"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","sources":["api/movies.js","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/AdditionalInfo/AdditionalInfo.styled.jsx","components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6455853a1d19428276a493b9a96f5669';\n\nexport async function fetchTrendMovies() {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n    params: params,\n  });\n  return response.data;\n}\n\nexport async function fetchMovies({ abortCtrl, query }) {\n  const params = {\n    api_key: API_KEY,\n    query: query,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    signal: abortCtrl.signal,\n    params: params,\n  });\n  return response.data;\n}\n\nexport async function fetchMovieDetails({ abortCtrl, movieId, fetchField }) {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  let endPoint;\n  switch (fetchField) {\n    case 'movie':\n      endPoint = `${BASE_URL}/movie/${movieId}`;\n      break;\n    case 'cast':\n      endPoint = `${BASE_URL}/movie/${movieId}/credits`;\n      break;\n    case 'reviews':\n      endPoint = `${BASE_URL}/movie/${movieId}/reviews`;\n      break;\n    default:\n      return;\n  }\n  const response = await axios.get(endPoint, {\n    signal: abortCtrl.signal,\n    params: params,\n  });\n  return response.data;\n}","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Section = styled.section`\n  padding: 20px;\n  display: flex;\n  gap: 20px;\n`;\nexport const BackLink = styled(Link)`\n  display: inline-block;\n  margin: 6px;\n  padding: 5px;\n  border-radius: 20px;\n  font-size: 12px;\n  text-align: center;\n`;\nexport const Poster = styled.img`\n  width: 350px;\n`;\nexport const Description = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-width: 600px;\n`;","import React, { useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Section, BackLink, Poster, Description } from './MovieCard.styled';\n\n\nconst IMAGES_URL = 'https://image.tmdb.org/t/p/w500';\n\nfunction MovieCard({ movieDetails }) {\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? `/movies`);\n  if (!movieDetails) return;\n  const { poster_path,  title, vote_average, overview, release_date, genres } =\n    movieDetails;\n  const genresToDisplay = genres.map(({ name }) => name).join(' ');\n\n  return (\n    <>\n      <BackLink to={backLinkHref.current}>&#129044; Go back</BackLink>\n      <Section>\n      {poster_path && <Poster src={IMAGES_URL + poster_path} alt={title} />}\n        <Description>\n          <h2>{`${title} (${release_date.slice(0, 4)})`}</h2>\n          <p>User Score: {`${Math.round(Number(vote_average) * 10)}%`}</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h4>Genres</h4>\n          <p>{genresToDisplay}</p>\n        </Description>\n      </Section>\n    </>\n  );\n}\n\nexport default MovieCard;","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Section = styled.section``;\nexport const SectionNav = styled.div`\n  padding: 4px 20px;\n  background-color: rgb(255, 109, 0);\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n`;\nexport const InfoLink = styled(Link)`\n  display: inline-block;\n  margin: 6px;\n  padding: 5px;\n  width: 70px;\n  border-radius: 20px;\n  color: black;\n  text-align: center;\n`;","import React, { Suspense } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { Section, SectionNav, InfoLink } from './AdditionalInfo.styled';\n\nfunction AdditionalInfo() {\n  return (\n    <Section>\n      <SectionNav>\n        <h3>Additional information</h3>\n        <InfoLink to=\"cast\"> Cast </InfoLink>\n        <InfoLink to=\"reviews\"> Reviews </InfoLink>\n      </SectionNav>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </Section>\n  );\n}\n\nexport default AdditionalInfo;","import React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovieDetails } from 'api/movies';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport AdditionalInfo from 'components/AdditionalInfo/AdditionalInfo';\n\nfunction MovieDetails() {\n  const abortCtrl = useRef();\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [movieDetails, setMovieDetails] = useState();\n\n  useEffect(() => {\n    async function loadMovieDetails() {\n      if (abortCtrl.current) {\n        abortCtrl.current.abort();\n      }\n      abortCtrl.current = new AbortController();\n      try {\n        setIsLoading(true);\n        const response = await fetchMovieDetails({\n          abortCtrl,\n          movieId,\n          fetchField: 'movie',\n        });\n        setMovieDetails(response);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          return toast.warn(`Oops, something went wrong.`);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    loadMovieDetails();\n  }, [movieId]);\n\n  return (\n    <>\n      <MovieCard movieDetails={movieDetails} />\n      {isLoading && <Loader />}\n      <AdditionalInfo />\n      <ToastContainer autoClose={3000} />\n    </>\n  );\n}\nexport default MovieDetails;"],"names":["BASE_URL","API_KEY","fetchTrendMovies","params","api_key","language","axios","response","data","fetchMovies","abortCtrl","query","include_adult","signal","fetchMovieDetails","movieId","fetchField","endPoint","Section","styled","BackLink","Link","Poster","Description","movieDetails","location","useLocation","backLinkHref","useRef","state","from","poster_path","title","vote_average","overview","release_date","genresToDisplay","genres","map","name","join","to","current","src","alt","slice","Math","round","Number","SectionNav","InfoLink","Suspense","fallback","Loader","useParams","useState","isLoading","setIsLoading","setMovieDetails","useEffect","abort","AbortController","code","toast","loadMovieDetails","autoClose"],"sourceRoot":""}