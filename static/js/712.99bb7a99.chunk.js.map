{"version":3,"file":"static/js/712.99bb7a99.chunk.js","mappings":"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","sources":["api/movies.js","components/MoviesCollection/MoviesCollection.styled.jsx","components/MoviesCollection/MoviesCollection.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '6455853a1d19428276a493b9a96f5669';\n\nexport async function fetchTrendMovies() {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`${BASE_URL}/trending/movie/day`, {\n    params: params,\n  });\n  return response.data;\n}\n\nexport async function fetchMovies({ abortCtrl, query }) {\n  const params = {\n    api_key: API_KEY,\n    query: query,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const response = await axios.get(`${BASE_URL}/search/movie`, {\n    signal: abortCtrl.signal,\n    params: params,\n  });\n  return response.data;\n}\n\nexport async function fetchMovieDetails({ abortCtrl, movieId, fetchField }) {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  let endPoint;\n  switch (fetchField) {\n    case 'movie':\n      endPoint = `${BASE_URL}/movie/${movieId}`;\n      break;\n    case 'cast':\n      endPoint = `${BASE_URL}/movie/${movieId}/credits`;\n      break;\n    case 'reviews':\n      endPoint = `${BASE_URL}/movie/${movieId}/reviews`;\n      break;\n    default:\n      return;\n  }\n  const response = await axios.get(endPoint, {\n    signal: abortCtrl.signal,\n    params: params,\n  });\n  return response.data;\n}","import styled from '@emotion/styled';\nexport const Section = styled.section`\n  padding: 20px;\n`;\n\nexport const SectionTitle = styled.h2`\n  padding: 16px 30px;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: flex-start;\n  gap: 20px;\n`;\nexport const Item = styled.li`\n  width: 150px;\n`;\nexport const Picture = styled.img`\n  width: 150px;\n  height: 225px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n`;\nexport const Title = styled.p`\n  padding: 6px;\n`;","import { Link, useLocation } from 'react-router-dom';\nimport {\n  Section,\n  SectionTitle,\n  List,\n  Item,\n  Picture,\n  Title,\n} from './MoviesCollection.styled';\n\nconst IMAGES_URL = 'https://image.tmdb.org/t/p/w500';\n\nfunction MoviesCollection({ movies, sectionTitle }) {\n  const location = useLocation();\n  return (\n    <Section>\n      {sectionTitle && <SectionTitle>{sectionTitle}</SectionTitle>}\n      <List>\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <Item key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n              {poster_path && <Picture src={IMAGES_URL + poster_path} alt={title} />}\n                <Title>{title}</Title>\n              </Link>\n            </Item>\n          );\n        })}\n      </List>\n    </Section>\n  );\n}\nexport default MoviesCollection;","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const StyledSearchbar = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #757575;\n\n`;\nexport const StyledForm = styled(Form)`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 300px;\n  background-color: #fff;\n  border-radius: 40px;\n  overflow: hidden;\n`;\nexport const SearchButton = styled.button`\ndisplay: flex;\ncursor: pointer;\nfont: inherit;\npadding: 10px 10px;\ncolor: #757575;\nborder: none;\nbackground-color: transparent;\n  }\n`;\nexport const SearchInput = styled(Field)`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 18px;\n  border: none;\n  outline: none;\n  height: 40px;\n  padding: 0px 0px 0px 14px;\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;","import { Formik } from 'formik';\nimport {\n  StyledSearchbar,\n  StyledForm,\n  SearchButton,\n  SearchInput,\n} from './Searchbar.styled';\n\nfunction Searchbar({ onSubmit, initialValue }) {\n  const handleSubmit = ({ query }) => {\n    onSubmit(query.toLowerCase());\n  };\n\n  return (\n    <StyledSearchbar>\n      <Formik initialValues={{ query: initialValue }} onSubmit={handleSubmit}>\n        <StyledForm>\n          <SearchInput\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search for a movie\"\n            name=\"query\"\n          />\n          <SearchButton type=\"submit\">Search\n          </SearchButton>\n        </StyledForm>\n      </Formik>\n    </StyledSearchbar>\n  );\n}\nexport default Searchbar;","import React, { useState, useEffect, useRef } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovies } from 'api/movies';\nimport Searchbar from '../components/Searchbar/Searchbar';\nimport MoviesCollection from 'components/MoviesCollection/MoviesCollection';\n\nfunction Movies() {\n  const abortCtrl = useRef();\n  const [isLoading, setIsLoading] = useState(false);\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const onQueryChange = chosenQuery => {\n    chosenQuery ? setSearchParams({ query: chosenQuery }) : setSearchParams({});\n    if (chosenQuery !== query) setMovies([]);\n  };\n\n  useEffect(() => {\n    if (query === '') return;\n    async function loadMovies() {\n      if (abortCtrl.current) {\n        abortCtrl.current.abort();\n      }\n      abortCtrl.current = new AbortController();\n      try {\n        setIsLoading(true);\n        const response = await fetchMovies({\n          abortCtrl,\n          query,\n        });\n        if (!response.results.length) {\n          return toast.warn(\n            `Sorry, there are no movies matching your search query. Please try again.`\n          );\n        }\n        setMovies(response.results);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          return toast.warn(`Oops, something went wrong.`);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    loadMovies();\n  }, [query, setSearchParams]);\n\n  return (\n    <>\n      <Searchbar\n        onSubmit={query => onQueryChange(query)}\n        initialValue={query}\n      />\n      <MoviesCollection movies={movies} />\n      {isLoading && <Loader />}\n      <ToastContainer autoClose={3000} />\n    </>\n  );\n}\nexport default Movies;"],"names":["BASE_URL","API_KEY","fetchTrendMovies","params","api_key","language","axios","response","data","fetchMovies","abortCtrl","query","include_adult","signal","fetchMovieDetails","movieId","fetchField","endPoint","Section","styled","SectionTitle","List","Item","Picture","Title","movies","sectionTitle","location","useLocation","map","id","title","poster_path","to","state","from","src","alt","StyledSearchbar","StyledForm","Form","SearchButton","SearchInput","Field","onSubmit","initialValue","initialValues","toLowerCase","type","autoComplete","autoFocus","placeholder","name","useRef","useState","isLoading","setIsLoading","setMovies","useSearchParams","searchParams","setSearchParams","get","onQueryChange","chosenQuery","useEffect","current","abort","AbortController","results","length","toast","code","loadMovies","MoviesCollection","Loader","autoClose"],"sourceRoot":""}