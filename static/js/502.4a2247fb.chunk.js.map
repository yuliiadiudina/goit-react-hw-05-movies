{"version":3,"file":"static/js/502.4a2247fb.chunk.js","mappings":"mQAEMA,EAAW,gCACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACCC,EAAS,CACbC,QAASH,EACTI,SAAU,SAHP,SAKkBC,EAAAA,EAAAA,IAAA,UAAaN,EAAb,sBAA2C,CAChEG,OAAQA,IANL,cAKCI,EALD,yBAQEA,EAASC,MARX,kEAWA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,kGAA6BC,EAA7B,EAA6BA,UAAWC,EAAxC,EAAwCA,MACvCR,EAAS,CACbC,QAASH,EACTU,MAAOA,EACPN,SAAU,QACVO,eAAe,GALZ,SAOkBN,EAAAA,EAAAA,IAAA,UAAaN,EAAb,gBAAqC,CAC1Da,OAAQH,EAAUG,OAClBV,OAAQA,IATL,cAOCI,EAPD,yBAWEA,EAASC,MAXX,kEAcA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,+FAAmCJ,EAAnC,EAAmCA,UAAWK,EAA9C,EAA8CA,QAASC,EAAvD,EAAuDA,WACtDb,EAAS,CACbC,QAASH,EACTI,SAAU,SAHP,KAMGW,EANH,OAOE,UAPF,OAUE,SAVF,OAaE,YAbF,8BAQDC,EAAQ,UAAMjB,EAAN,kBAAwBe,GAR/B,mCAWDE,EAAQ,UAAMjB,EAAN,kBAAwBe,EAAxB,YAXP,mCAcDE,EAAQ,UAAMjB,EAAN,kBAAwBe,EAAxB,YAdP,gFAmBkBT,EAAAA,EAAAA,IAAUW,EAAU,CACzCJ,OAAQH,EAAUG,OAClBV,OAAQA,IArBL,eAmBCI,EAnBD,yBAuBEA,EAASC,MAvBX,mE,kMC5BMU,EAAOC,EAAAA,EAAAA,GAAH,8FAMJC,EAAOD,EAAAA,EAAAA,GAAH,mGAMJE,EAAUF,EAAAA,EAAAA,IAAH,yC,SCkDpB,MAtDA,WACE,IAAMT,GAAYY,EAAAA,EAAAA,UACVP,GAAYQ,EAAAA,EAAAA,MAAZR,QACR,GAAkCS,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,YAAlC,eAAOG,EAAP,KAAkBC,EAAlB,KA2BA,OAzBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACMnB,EAAUoB,SACZpB,EAAUoB,QAAQC,QAEpBrB,EAAUoB,QAAU,IAAIE,gBAJ1B,SAMIN,GAAa,GANjB,UAO2BZ,EAAAA,EAAAA,IAAkB,CACvCJ,UAAAA,EACAK,QAAAA,EACAC,WAAY,SAVlB,OAOUT,EAPV,OAYIqB,EAAarB,EAAS0B,KAAKC,MAAM,EAAG,IAZxC,qDAcuB,iBAAf,KAAMC,KAdd,0CAeaC,EAAAA,GAAAA,KAAA,gCAfb,yBAkBIV,GAAa,GAlBjB,8EADc,uBAAC,WAAD,wBAsBdW,EACD,GAAE,CAACtB,KAGF,UAACG,EAAD,WACGS,GACCA,EAAUW,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACpC,OACE,UAACtB,EAAD,WACGsB,IACC,SAACrB,EAAD,CAASsB,IAvCN,kCAuCwBD,EAAcE,IAAKJ,KAEhD,wBAAKA,KACL,4CAAkBC,OALTF,EAQd,IACFZ,IAAcA,EAAUkB,SACvB,0EAEDpB,IAAa,SAACqB,EAAA,EAAD,KACd,SAAC,KAAD,CAAgBC,UAAW,QAGhC,C","sources":["api/movies.js","components/MovieCast/MovieCast.styled.jsx","components/MovieCast/MovieCast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6455853a1d19428276a493b9a96f5669';\n\nexport async function fetchTrendMovies() {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n    params: params,\n  });\n  return response.data;\n}\n\nexport async function fetchMovies({ abortCtrl, query }) {\n  const params = {\n    api_key: API_KEY,\n    query: query,\n    language: 'en-US',\n    include_adult: false,\n  };\n  const response = await axios.get(`${BASE_URL}search/movie`, {\n    signal: abortCtrl.signal,\n    params: params,\n  });\n  return response.data;\n}\n\nexport async function fetchMovieDetails({ abortCtrl, movieId, fetchField }) {\n  const params = {\n    api_key: API_KEY,\n    language: 'en-US',\n  };\n  let endPoint;\n  switch (fetchField) {\n    case 'movie':\n      endPoint = `${BASE_URL}/movie/${movieId}`;\n      break;\n    case 'cast':\n      endPoint = `${BASE_URL}/movie/${movieId}/credits`;\n      break;\n    case 'reviews':\n      endPoint = `${BASE_URL}/movie/${movieId}/reviews`;\n      break;\n    default:\n      return;\n  }\n  const response = await axios.get(endPoint, {\n    signal: abortCtrl.signal,\n    params: params,\n  });\n  return response.data;\n}","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n`;\nexport const Item = styled.li`\n  width: 150px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\nexport const Picture = styled.img`\n  width: 150px;\n`;","import React, { useState, useEffect, useRef } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loader } from 'components/Loader/Loader';\nimport { fetchMovieDetails } from 'api/movies';\nimport { List, Item, Picture } from './MovieCast.styled';\n\n\nconst IMAGES_URL = 'https://image.tmdb.org/t/p/w500';\nfunction MovieCast() {\n  const abortCtrl = useRef();\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [movieCast, setMovieCast] = useState();\n\n  useEffect(() => {\n    async function loadMovieCast() {\n      if (abortCtrl.current) {\n        abortCtrl.current.abort();\n      }\n      abortCtrl.current = new AbortController();\n      try {\n        setIsLoading(true);\n        const response = await fetchMovieDetails({\n          abortCtrl,\n          movieId,\n          fetchField: 'cast',\n        });\n        setMovieCast(response.cast.slice(0, 7));\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          return toast.warn(`Oops, something went wrong.`);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    loadMovieCast();\n  }, [movieId]);\n\n  return (\n    <List>\n      {movieCast &&\n        movieCast.map(({ id, name, character, profile_path }) => {\n          return (\n            <Item key={id}>\n              {profile_path &&\n                <Picture src={IMAGES_URL + profile_path} alt={name} />\n              }\n              <h5>{name}</h5>\n              <p>{`Character: ${character}`}</p>\n            </Item>\n          );\n        })}\n      {movieCast && !movieCast.length && (\n        <p>There is no information about this movie cast.</p>\n      )}\n      {isLoading && <Loader />}\n      <ToastContainer autoClose={3000} />\n    </List>\n  );\n}\n\nexport default MovieCast;"],"names":["BASE_URL","API_KEY","fetchTrendMovies","params","api_key","language","axios","response","data","fetchMovies","abortCtrl","query","include_adult","signal","fetchMovieDetails","movieId","fetchField","endPoint","List","styled","Item","Picture","useRef","useParams","useState","isLoading","setIsLoading","movieCast","setMovieCast","useEffect","current","abort","AbortController","cast","slice","code","toast","loadMovieCast","map","id","name","character","profile_path","src","alt","length","Loader","autoClose"],"sourceRoot":""}